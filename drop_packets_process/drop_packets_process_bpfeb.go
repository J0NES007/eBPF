// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDrop_packets_process returns the embedded CollectionSpec for drop_packets_process.
func loadDrop_packets_process() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Drop_packets_processBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load drop_packets_process: %w", err)
	}

	return spec, err
}

// loadDrop_packets_processObjects loads drop_packets_process and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*drop_packets_processObjects
//	*drop_packets_processPrograms
//	*drop_packets_processMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDrop_packets_processObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDrop_packets_process()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// drop_packets_processSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type drop_packets_processSpecs struct {
	drop_packets_processProgramSpecs
	drop_packets_processMapSpecs
}

// drop_packets_processSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type drop_packets_processProgramSpecs struct {
	DropPackets *ebpf.ProgramSpec `ebpf:"drop_packets"`
	HandleBind  *ebpf.ProgramSpec `ebpf:"handle_bind"`
}

// drop_packets_processMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type drop_packets_processMapSpecs struct {
	BpfPortMap *ebpf.MapSpec `ebpf:"bpf_port_map"`
	PortMap    *ebpf.MapSpec `ebpf:"port_map"`
}

// drop_packets_processObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDrop_packets_processObjects or ebpf.CollectionSpec.LoadAndAssign.
type drop_packets_processObjects struct {
	drop_packets_processPrograms
	drop_packets_processMaps
}

func (o *drop_packets_processObjects) Close() error {
	return _Drop_packets_processClose(
		&o.drop_packets_processPrograms,
		&o.drop_packets_processMaps,
	)
}

// drop_packets_processMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDrop_packets_processObjects or ebpf.CollectionSpec.LoadAndAssign.
type drop_packets_processMaps struct {
	BpfPortMap *ebpf.Map `ebpf:"bpf_port_map"`
	PortMap    *ebpf.Map `ebpf:"port_map"`
}

func (m *drop_packets_processMaps) Close() error {
	return _Drop_packets_processClose(
		m.BpfPortMap,
		m.PortMap,
	)
}

// drop_packets_processPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDrop_packets_processObjects or ebpf.CollectionSpec.LoadAndAssign.
type drop_packets_processPrograms struct {
	DropPackets *ebpf.Program `ebpf:"drop_packets"`
	HandleBind  *ebpf.Program `ebpf:"handle_bind"`
}

func (p *drop_packets_processPrograms) Close() error {
	return _Drop_packets_processClose(
		p.DropPackets,
		p.HandleBind,
	)
}

func _Drop_packets_processClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed drop_packets_process_bpfeb.o
var _Drop_packets_processBytes []byte
